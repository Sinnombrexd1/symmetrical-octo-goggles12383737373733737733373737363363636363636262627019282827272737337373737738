local Players = game:GetService("Players")
local Workspace = game:GetService('Workspace')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')
local Lighting = game:GetService('Lighting')
local UIS = game:GetService('UserInputService')
local ScriptContext = game:GetService('ScriptContext')
local Camera = Workspace.CurrentCamera
local player = Players.LocalPlayer
local Mouse = player:GetMouse()
local Terrain = Workspace.Terrain
local VirtualUser = game:GetService("VirtualUser")

local getgenv = getgenv or function() return _ENV or _G end
local gevget = getgenv()

gevget.supportedGameIds = {
    [142823291] = "Murder Mystery 2",
    [100742383703997] = "MMV",
    [72489591238825] = "Game ",
    [6924758805] = "Game "
}

gevget.vipPlayerId = 2784663867

local function notify(title, msg, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = tostring(title);
            Text = tostring(msg);
            Duration = duration or 5;
            Icon = "";
        })
    end)
end

if not game:IsLoaded() then
    local message = Instance.new("Hint")
    message.Text = "Waiting For Game To Load..."
    message.Parent = CoreGui
    game.Loaded:Wait()
    message:Destroy()
end

if not (hookmetamethod and setreadonly and newcclosure and getnamecallmethod) then
    notify("Error", "Exploit no compatible: Funciones esenciales faltantes")
    return
end

local gameName = gevget.supportedGameIds[game.PlaceId]
local isVIP = player.UserId == gevget.vipPlayerId

if not isVIP and not gameName then
    local supportedNames = {}
    for _, name in pairs(gevget.supportedGameIds) do
        if name and name ~= "" then
            table.insert(supportedNames, name)
        end
    end
    notify("Error", "Juego no soportado. Soporta: " .. table.concat(supportedNames, " / "))
    return
end

if gevget.Capy then
    notify("Error", "El script ya está ejecutándose!")
    return
end
gevget.Capy = true

notify("Script Iniciado", ("Bienvenido %s!\nJuego: %s"):format(player.Name, gameName or "VIP Mode"), 5)

function gevget.ExampleFunction()
    print("load")
end

-- loadstring(game:HttpGet("https://paste-drop.com/raw/msJ7MPz92C"))()
local Library = loadstring(game:HttpGet("https://pastebin.com/raw/Le0Aq8B7"))()
local Window = Library.CreateLib("CapybaraScript 20.1", colors)

local colors = {
    SchemeColor = Color3.fromRGB(255, 87, 34),
    Background = Color3.fromRGB(36, 36, 36),
    Header = Color3.fromRGB(54, 54, 54),
    TextColor = Color3.fromRGB(255, 255, 255),
    ElementColor = Color3.fromRGB(121, 85, 72)
}

local CapyScreen = Instance.new("ScreenGui")
local CapyToggleUI = Instance.new("TextButton")
local CapyCornerUI = Instance.new("UICorner")
local CapyImageUI = Instance.new("ImageLabel")
local CapyImageCornerUI = Instance.new("UICorner")

CapyScreen.Name = "DANGGOHUBScreen"
CapyScreen.Parent = game.CoreGui
CapyScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
CapyScreen.ResetOnSpawn = false

CapyToggleUI.Name = "CapyToggleUI"
CapyToggleUI.Parent = CapyScreen
CapyToggleUI.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
CapyToggleUI.Position = UDim2.new(0.12, 0, 0.1, 0)
CapyToggleUI.Size = UDim2.new(0, 40, 0, 40)
CapyToggleUI.Text = ""
CapyToggleUI.Draggable = true
CapyToggleUI.MouseButton1Click:Connect(function()
    if Library and Library.ToggleUI then
        Library:ToggleUI()
    end
end)

CapyCornerUI.CornerRadius = UDim.new(1, 0)
CapyCornerUI.Parent = CapyToggleUI

CapyImageUI.Name = "CapyImageUI"
CapyImageUI.Parent = CapyToggleUI
CapyImageUI.BackgroundColor3 = Color3.fromRGB(192, 192, 192)
CapyImageUI.BorderSizePixel = 0
CapyImageUI.Size = UDim2.new(1, 0, 1, 0)
CapyImageUI.Image = "rbxassetid://98340377583067"

CapyImageCornerUI.CornerRadius = UDim.new(1, 0)
CapyImageCornerUI.Parent = CapyImageUI

setfpscap(math.huge)
print("Fps unblock")
local CombateTab = Window:NewTab("Combat")
local HitboxTab = Window:NewTab("Hitbox expander")
local VisualTab = Window:NewTab("Visual")
local TeleportTab = Window:NewTab("Teleport")
local AutoFarmTab = Window:NewTab("Auto Farm")
local LocalPlayerTab = Window:NewTab("Local Player")
local EmoteTab = Window:NewTab("Emote")
local MICTab = Window:NewTab("MIC")
local buttonsTab = Window:NewTab("buttons")

local CombateSection = CombateTab:NewSection("Opciones Combat")
local HitboxSection = HitboxTab:NewSection("Opciones Hitbox expander")
local VisualSection = VisualTab:NewSection("Opciones Visuales")
local TeleportSection = TeleportTab:NewSection("Opciones Teleport")
local AutoFarmSection = AutoFarmTab:NewSection("Opciones Auto Farm")
local LocalPlayerSection = LocalPlayerTab:NewSection("Opciones Local Player")
local EmoteSection = EmoteTab:NewSection("Opciones Emote")
local MICSection = MICTab:NewSection("Opciones MIC")
local buttonsSection = buttonsTab:NewSection("Opciones buttons")
local configFileName = "mm2Config.txt"

local function saveConfig(stateTable)
    writefile(configFileName, game.HttpService:JSONEncode(stateTable))
end

local function loadConfig()
    if isfile(configFileName) then
        local success, data = pcall(function()
            return game.HttpService:JSONDecode(readfile(configFileName))
        end)
        
        if success and type(data) == "table" then
            return data
        end
    end
    return {}
end

local savedConfig = loadConfig()

--////////////////////////////////////////////////////////////////////////////////
 --////////////////////////////////////// COMBATE ////////////////////////////////////
 --////////////////////////////////////////////////////////////////////////////////

local blockPosition = Vector3.new(-74, 6, 693)
local blockSize = Vector3.new(100, 2, 100)
local wallHeight = 5

local function blockExists(pos, size)
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Part") and obj.Position == pos and obj.Size == size then
            return true
        end
    end
    return false
end

if not blockExists(blockPosition, blockSize) then
    local wideBlock = Instance.new("Part")
    wideBlock.Size = blockSize
    wideBlock.Position = blockPosition
    wideBlock.Anchored = true
    wideBlock.CanCollide = true
    wideBlock.Transparency = 0.5
    wideBlock.Parent = workspace
    
    local wallSize = Vector3.new(60, wallHeight, 2)
    local wallPositions = {
        blockPosition + Vector3.new(0, wallHeight / 2, 30),
        blockPosition + Vector3.new(0, wallHeight / 2, -30),
        blockPosition + Vector3.new(30, wallHeight / 2, 0),
        blockPosition + Vector3.new(-30, wallHeight / 2, 0),
    }

    for _, pos in ipairs(wallPositions) do
        local wall = Instance.new("Part")
        wall.Size = wallSize
        wall.Position = pos
        wall.Anchored = true
        wall.CanCollide = true
        wall.Transparency = 0.5
        wall.Parent = workspace
    end
end
 
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PredictionBox

local debounceTime = 0.1
local lastFireTime = 0
local moveThreshold = 60
local initialTouchPosition = nil

local isScriptActive = false
local sharperShooterMultiplier = 1.5
local isSharperShooterActive = false

local function createPredictionVisual()
    PredictionBox = Instance.new("Part")
    PredictionBox.Size = Vector3.new(0.4, 0.4, 0.4)
    PredictionBox.Shape = Enum.PartType.Ball
    PredictionBox.Anchored = true
    PredictionBox.CanCollide = false
    PredictionBox.Massless = true
    PredictionBox.Color = Color3.new(0, 0, 1)
    PredictionBox.Transparency = 1
    PredictionBox.Parent = workspace
end

local function getCharacterRootPart(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
end

local function hasKnife(player)
    if player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            if item:IsA("Tool") and item.Name == "Knife" then
                return true
            end
        end
    end

    local backpack = player:FindFirstChildOfClass("Backpack")
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and item.Name == "Knife" then
                return true
            end
        end
    end
    
    return false
end

local function calculatePrediction(target, distance)
    if not target then return nil end
    local rootPart = getCharacterRootPart(target)
    if not rootPart then return nil end

    local targetPosition = rootPart.Position
    local targetVelocity = rootPart.Velocity
    local shooterPosition = LocalPlayer.Character.HumanoidRootPart.Position

    local predictionTimeHorizontal = 0.23
    local predictionTimeVertical = 0.04

    if distance > 30 then
        predictionTimeVertical = 0.06
        predictionTimeHorizontal = 0.15
    else
        predictionTimeVertical = 0.04
        predictionTimeHorizontal = 0.233
    end

    if isSharperShooterActive then
        predictionTimeHorizontal = predictionTimeHorizontal / sharperShooterMultiplier
        predictionTimeVertical = predictionTimeVertical / sharperShooterMultiplier
    end

    local predictedX = targetPosition.X + (targetVelocity.X * predictionTimeHorizontal)
    local predictedY = targetPosition.Y + (targetVelocity.Y * predictionTimeVertical)
    local predictedZ = targetPosition.Z + (targetVelocity.Z * predictionTimeHorizontal)

    local predictedPosition = Vector3.new(predictedX, predictedY, predictedZ)

    return predictedPosition
end

local function updatePrediction()
    if not isScriptActive or not PredictionBox then return end

    local closestPlayer
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if hasKnife(player) then -- Solo selecciona jugadores con Knife
                local rootPart = getCharacterRootPart(player.Character)
                if rootPart then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    if closestPlayer then
        local predictedPosition = calculatePrediction(closestPlayer.Character, shortestDistance)
        if predictedPosition then
            PredictionBox.Position = predictedPosition
        end
    end
end

local function shootAtClosestPlayer()
    if not isScriptActive then return end

    local closestPlayer
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if hasKnife(player) then -- Solo selecciona jugadores con Knife
                local rootPart = getCharacterRootPart(player.Character)
                if rootPart then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    if closestPlayer then
        local predictedPosition = calculatePrediction(closestPlayer.Character, shortestDistance)
        if predictedPosition then
            local args = {
                [1] = 1,
                [2] = predictedPosition,
                [3] = "AH2"
            }
            LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
        end
    end
end

local function toggleScript()
    isScriptActive = not isScriptActive
    if isScriptActive then
        createPredictionVisual()
    else
        if PredictionBox then
            PredictionBox:Destroy()
            PredictionBox = nil
        end
    end
end

local function toggleSharperShooter(state)
    isSharperShooterActive = state
    if isSharperShooterActive then
        sharperShooterMultiplier = 1.5
        print("Sharper Shooter Activado")
    else
        sharperShooterMultiplier = 1
        print("Sharper Shooter Desactivado")
    end
end

createPredictionVisual()
RunService.RenderStepped:Connect(updatePrediction)

UserInputService.TouchEnded:Connect(function(input)
    if initialTouchPosition then
        local finalTouchPosition = input.Position
        local movement = (finalTouchPosition - initialTouchPosition).Magnitude
        if movement < moveThreshold then
            local currentTime = tick()
            if currentTime - lastFireTime >= debounceTime then
                lastFireTime = currentTime
                shootAtClosestPlayer()
            end
        end
    end
end)

UserInputService.TouchStarted:Connect(function(input)
    initialTouchPosition = input.Position
end)

CombateSection:NewLabel("Aimbot")

CombateSection:NewToggle("Silent Aim", "Activa o desactiva el script de Silent Aim", function(state)
    isScriptActive = state
end)

CombateSection:NewToggle("Sharp Shooter", "Mejora la precisión del Silent Aim", function(state)
    toggleSharperShooter(state)
end)

CombateSection:NewButton("Shoot the murderer", "ButtonInfo", function()
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PredictionBox

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ShootMurdererGui"
screenGui.Parent = game:GetService("CoreGui")

local button = Instance.new("TextButton")
local clickSound = Instance.new("Sound")

button.Name = "Button"
button.Size = UDim2.new(0, 150, 0, 150)
button.Position = UDim2.new(0.85, -50, 0.15, -50)
button.Text = "Shoot"
button.Font = Enum.Font.Gotham
button.TextSize = 14
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
button.BackgroundTransparency = 0.6
button.Draggable = true
button.BorderSizePixel = 0
button.Parent = screenGui

clickSound.SoundId = "rbxassetid://1673280232"
clickSound.Parent = button

local function createPredictionVisual()
    PredictionBox = Instance.new("Part")
    PredictionBox.Size = Vector3.new(0.4, 0.4, 0.4)
    PredictionBox.Shape = Enum.PartType.Ball
    PredictionBox.Anchored = true
    PredictionBox.CanCollide = false
    PredictionBox.Massless = true
    PredictionBox.Color = Color3.new(0, 0, 1)
    PredictionBox.Transparency = 1
    PredictionBox.Parent = workspace
end

local function getCharacterRootPart(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
end

local function EquipGun()
    local gunInBackpack = LocalPlayer.Backpack:FindFirstChild("Gun")
    if gunInBackpack then
        gunInBackpack.Parent = LocalPlayer.Character
        return true
    end
    return false
end

local function calculatePrediction(target, distance)
    if not target then return nil end
    local rootPart = getCharacterRootPart(target)
    if not rootPart then return nil end

    local targetPosition = rootPart.Position
    local targetVelocity = rootPart.Velocity
    local shooterPosition = LocalPlayer.Character.HumanoidRootPart.Position

    local predictionTimeHorizontal = 0.233
    local predictionTimeVertical = 0.07

    if distance > 30 then
        predictionTimeVertical = 0.07
        predictionTimeHorizontal = 0.15
    else
        predictionTimeVertical = 0.07
        predictionTimeHorizontal = 0.233
    end

    local predictedX = targetPosition.X + (targetVelocity.X * predictionTimeHorizontal)
    local predictedY = targetPosition.Y + (targetVelocity.Y * predictionTimeVertical)
    local predictedZ = targetPosition.Z + (targetVelocity.Z * predictionTimeHorizontal)

    local predictedPosition = Vector3.new(predictedX, predictedY, predictedZ)

    return predictedPosition
end

local function hasKnife(player)
    if player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            if item:IsA("Tool") and item.Name == "Knife" then
                return true
            end
        end
    end

    local backpack = player:FindFirstChildOfClass("Backpack")
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and item.Name == "Knife" then
                return true
            end
        end
    end
    
    return false
end

local function updatePrediction()
    local closestPlayer
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if hasKnife(player) then -- Solo selecciona jugadores con Knife
                local rootPart = getCharacterRootPart(player.Character)
                if rootPart then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    if closestPlayer and PredictionBox then
        local predictedPosition = calculatePrediction(closestPlayer.Character, shortestDistance)
        if predictedPosition then
            PredictionBox.Position = predictedPosition
        end
    end
end

local function shootAtClosestPlayer()
    local closestPlayer
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if hasKnife(player) then -- Solo selecciona jugadores con Knife
                local rootPart = getCharacterRootPart(player.Character)
                if rootPart then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    if closestPlayer then
        local predictedPosition = calculatePrediction(closestPlayer.Character, shortestDistance)
        if predictedPosition then
            local args = {
                [1] = 1,
                [2] = predictedPosition,
                [3] = "AH2"
            }
            LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
        end
    end
end

button.MouseButton1Click:Connect(function()
EquipGun()
    shootAtClosestPlayer()
    clickSound:Play()
end)

createPredictionVisual()
RunService.RenderStepped:Connect(updatePrediction)
end)

CombateSection:NewLabel("For Murderer")

CombateSection:NewButton("Kill All [murderer Only]", "ButtonInfo", function()
loadstring(game:HttpGet("https://pastebin.com/raw/0DDgYP4Y"))()
    end)

local RS = game:GetService("RunService")
local Plr = game.Players.LocalPlayer

local knifeEq = false
local auraOn = false
local auraConn
local rootPart
local lastSlash = 0
local slashDelay = 0.5

local function getRoot(c)
    if c then return c:WaitForChild("HumanoidRootPart", 2) end
end

Plr.CharacterAdded:Connect(function(c)
    rootPart = getRoot(c)
end)

if Plr.Character then
    rootPart = getRoot(Plr.Character)
end

local function equipKnife()
    local knife = Plr.Backpack:FindFirstChild("Knife")
    if not knifeEq and knife then
        knife.Parent = Plr.Character
        knifeEq = true
    end
end

local function unequipKnife()
    local knife = Plr.Character:FindFirstChild("Knife")
    if knifeEq and knife then
        knife.Parent = Plr.Backpack
        knifeEq = false
    end
end

local function findNearby()
    local nearPlr, nearDist = nil, 7.1
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p ~= Plr and p.Character then
            local pRoot = p.Character:FindFirstChild("HumanoidRootPart")
            if pRoot then
                local dist = (rootPart.Position - pRoot.Position).Magnitude
                if dist <= nearDist then
                    nearPlr = p
                    break
                end
            end
        end
    end
    return nearPlr
end

local function aura()
    if not auraOn or not rootPart then return end
    local target = findNearby()
    if target then
        equipKnife()
        if knifeEq and tick() - lastSlash >= slashDelay then
            local args = { [1] = "Down" }
            game:GetService("Players").LocalPlayer.Character.Knife.Stab:FireServer(unpack(args))
            lastSlash = tick()
        end
    else
        unequipKnife()
    end
end

local function startAura()
    if auraConn then auraConn:Disconnect() end
    auraOn = true
    auraConn = RS.Heartbeat:Connect(aura)
end

local function stopAura()
    auraOn = false
    unequipKnife()
    if auraConn then
        auraConn:Disconnect()
        auraConn = nil
    end
end

CombateSection:NewToggle("Knife Aura", "ToggleInfo", function(state)
    if state then startAura() else stopAura() end
end)

RS.Heartbeat:Connect(function()
    if auraOn and not rootPart and Plr.Character then
        rootPart = getRoot(Plr.Character)
    end
end)

CombateSection:NewToggle("Kill aura", "Activa o desactiva el script", function(state)
    scriptActive = state
end)

CombateSection:NewTextBox("Detection Radius Kill Aura", "Escribe el radio de detección para los enemigos", function(value)
    detectionRadius = tonumber(value) or 9.4
end)

local function hasKnife()
    local bp = Plr:FindFirstChild("Backpack")
    if bp and bp:FindFirstChild("Knife") then return true end
    local c = Plr.Character
    if c and c:FindFirstChild("Knife") then return true end
    return false
end

local function teleportEnemy(e)
    if rootPart and e then
        local eRoot = e:FindFirstChild("HumanoidRootPart")
        if eRoot then
            local dir = rootPart.CFrame.LookVector
            eRoot.CFrame = CFrame.new(rootPart.Position + dir * 2.8)
        end
    end
end

local function findClosest()
    local closest, dist = nil, detectionRadius
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= Plr and p.Character then
            local pRoot = p.Character:FindFirstChild("HumanoidRootPart")
            if pRoot then
                local d = (pRoot.Position - rootPart.Position).Magnitude
                if d < dist then
                    closest, dist = p, d
                end
            end
        end
    end
    return closest
end

local function teleportClosest()
    if scriptActive and rootPart and hasKnife() then
        local closest = findClosest()
        if closest and closest.Character then
            teleportEnemy(closest.Character)
        end
    end
end

Plr.CharacterAdded:Connect(function(c)
    rootPart = getRoot(c)
end)

rootPart = getRoot(Plr.Character)

RS.Heartbeat:Connect(function()
    if scriptActive and hasKnife() and rootPart then
        teleportClosest()
    end
end)
 
 CombateSection:NewLabel("Cam aimbot")
 
 CombateSection:NewButton("Cam Aimbot murderer", "ButtonInfo", function()
local RS, Players, ReplicatedStorage = game:GetService("RunService"), game:GetService("Players"), game:GetService("ReplicatedStorage")
local LP, Camera = Players.LocalPlayer, workspace.CurrentCamera

local screenGui, button = Instance.new("ScreenGui"), Instance.new("TextButton")
screenGui.Name, screenGui.Parent = "aimbot", game:GetService("CoreGui")

button.Name, button.Size, button.Position = "Button", UDim2.new(0, 50, 0, 50), UDim2.new(0.5, -35, 0, 10)
button.Text, button.Font, button.TextSize = "Aimbot OFF", Enum.Font.Gotham, 10
button.TextColor3, button.BackgroundColor3, button.BackgroundTransparency = Color3.new(1, 1, 1), Color3.fromRGB(60, 60, 60), 0.6
button.Draggable, button.BorderSizePixel, button.Parent = true, 0, screenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius, UICorner.Parent = UDim.new(0, 15), button

local aimbotEnabled, targetPlayer = false, nil

button.MouseButton1Click:Connect(function()
    aimbotEnabled = not aimbotEnabled
    button.Text = aimbotEnabled and "Aimbot ON" or "Aimbot OFF"
end)

RS.RenderStepped:Connect(function()
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    targetPlayer = nil

    for name, data in pairs(roles or {}) do
        if data.Role == "Murderer" and name ~= LP.Name then
            targetPlayer = Players:FindFirstChild(name)
            break
        end
    end

    if aimbotEnabled and targetPlayer and targetPlayer.Character then
        local char, torso = targetPlayer.Character, targetPlayer.Character:FindFirstChild("Torso") or targetPlayer.Character:FindFirstChild("UpperTorso")
        local humanoid = char:FindFirstChild("Humanoid")

        if torso and humanoid then
            local lookVector, directionToPlayer = torso.CFrame.LookVector, (LP.Character.HumanoidRootPart.Position - torso.Position).Unit
            local targetPos = (lookVector:Dot(directionToPlayer) < -0.7 or humanoid.MoveDirection.Magnitude == 0 or math.abs(lookVector.X) < 0.1) 
                and torso.Position or torso.Position + lookVector * 3
            
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
        end
    end
end)
end)

CombateSection:NewButton("TP Shoot", "ButtonInfo", function()
local existingGui = game:GetService("CoreGui"):FindFirstChild("tps")
if existingGui then return end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "tps"
screenGui.Parent = game:GetService("CoreGui")

local button = Instance.new("TextButton")
button.Name = "Button"
button.Size = UDim2.new(0, 50, 0, 50)
button.Position = UDim2.new(1, -220, 0, 10)
button.Text = "TP SHOOT"
button.Font = Enum.Font.Gotham
button.TextSize = 14
button.Draggable = true
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
button.BackgroundTransparency = 0.6
button.BorderSizePixel = 0
button.Parent = screenGui

local function playerHasKnife(player)
    local backpack = player.Backpack
    if backpack:FindFirstChild("Knife") then
        return true
    end

    local character = player.Character
    if character and character:FindFirstChild("Knife") then
        return true
    end

    return false
end

local function equipGun()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    if not character then return false end

    local gunInBackpack = player.Backpack:FindFirstChild("Gun")
    if gunInBackpack then
        gunInBackpack.Parent = character
        return true
    else
        return false
    end
end

local function teleportAndShoot(targetPlayer)
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")

    if not playerHasKnife(targetPlayer) then
        return
    end

    if not character or not character:FindFirstChild("Gun") then
        if not equipGun() then
            return
        end
    end

    local gun = character:FindFirstChild("Gun")
    if not gun then
        return
    end

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPart = targetPlayer.Character.HumanoidRootPart
        local originalPosition = rootPart.Position
        local runService = game:GetService("RunService")
        local renderConnection

        renderConnection = runService.RenderStepped:Connect(function()
            if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                renderConnection:Disconnect()
                return
            end

            local targetPosition = targetPart.Position
            local behindPosition = targetPosition - (targetPart.CFrame.LookVector * 5) - Vector3.new(0, -1, 0)
            rootPart.CFrame = CFrame.new(behindPosition)
            character:SetPrimaryPartCFrame(CFrame.new(rootPart.Position, targetPart.Position))
        end)

        wait(0.3)

        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        local args = {
            [1] = 1,
            [2] = targetPosition,
            [3] = "AH2"
        }

        game:GetService("Players").LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))

        wait(0.01)
        renderConnection:Disconnect()
        rootPart.CFrame = CFrame.new(originalPosition)
    else
        return
    end
end

local function onButtonPress()
    button.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
    wait(0.2)
    button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

    local player = game:GetService("Players").LocalPlayer
    local targetPlayer = game:GetService("Players"):GetPlayers()

    for _, otherPlayer in pairs(targetPlayer) do
        if playerHasKnife(otherPlayer) then
            teleportAndShoot(otherPlayer)
            return
        end
    end
end

button.MouseButton1Click:Connect(onButtonPress)
    end)
    
--////////////////////////////////////////////////////////////////////////////////
--////////////////////////////////////// HITBOX ////////////////////////////////////
--////////////////////////////////////////////////////////////////////////////////
 
getgenv().customHitboxSize = 10
getgenv().hitboxEnabled = false
getgenv().collisionEnabled = false
getgenv().customTransparency = 0.7
getgenv().customMaterial = Enum.Material.SmoothPlastic
getgenv().customColor = Color3.fromRGB(169, 169, 169)

local players = game:GetService('Players')
local localPlayer = players.LocalPlayer

game:GetService('RunService').Heartbeat:Connect(function()
    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer then
            pcall(function()
                local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    if getgenv().hitboxEnabled then
                        humanoidRootPart.Size = Vector3.new(getgenv().customHitboxSize, getgenv().customHitboxSize, getgenv().customHitboxSize)
                        humanoidRootPart.Transparency = getgenv().customTransparency
                        humanoidRootPart.Material = getgenv().customMaterial
                        humanoidRootPart.CanCollide = getgenv().collisionEnabled
                    else
                        humanoidRootPart.Size = humanoidRootPart.Size
                        humanoidRootPart.Transparency = 1
                        humanoidRootPart.Material = Enum.Material.SmoothPlastic
                        humanoidRootPart.CanCollide = false
                    end
                end
            end)
        end
    end
end)

HitboxSection:NewToggle("Activate Hitbox", "Activa o desactiva el hitbox", function(state)
    getgenv().hitboxEnabled = state
end)

HitboxSection:NewTextBox("Hitbox Transparency", "Introduce un valor entre 0 y 1", function(value)
    getgenv().customTransparency = tonumber(value) or getgenv().customTransparency
end)

HitboxSection:NewTextBox("Hitbox Size", "Introduce un valor numérico", function(value)
    getgenv().customHitboxSize = tonumber(value) or getgenv().customHitboxSize
end)

HitboxSection:NewToggle("Enable Collision", "Activa o desactiva la colisión", function(state)
    getgenv().collisionEnabled = state
end)

HitboxSection:NewButton("Knife reach", "ButtonInfo", function()
getgenv().KnifeSize = true
getgenv().KnifeSize1 = 8

local player = game.Players.LocalPlayer  
local character = player.Character or player.CharacterAdded:Wait()  

if character then  
    local knife = character:FindFirstChild("Knife")  

    if knife and knife:IsA("Tool") then  
        local handle = knife:FindFirstChild("Handle")  

        if handle and handle:IsA("BasePart") then  
            handle.Massless = true  
            handle.Anchored = false  
            handle.CanCollide = false  

            if getgenv().KnifeSize then  
                handle.Size = Vector3.new(getgenv().KnifeSize1, getgenv().KnifeSize1, getgenv().KnifeSize1)  
            end  
        end  
    end  
end
end)

--////////////////////////////////////////////////////////////////////////////////
 --////////////////////////////////////// VISUAL ////////////////////////////////////
 --////////////////////////////////////////////////////////////////////////////////
 
local xray = false
local saved = {}

local function setTransparency(obj)
    for _, v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") then
            if xray then
                saved[v] = saved[v] or v.Transparency
                v.Transparency = 0.5
            else
                if saved[v] then
                    v.Transparency = saved[v]
                    saved[v] = nil
                end
            end
        end
        setTransparency(v)
    end
end

local function toggleXRay()
    setTransparency(workspace)
end

VisualSection:NewToggle("XRay", "Toggle XRay transparency", function(state)
    xray = state
    toggleXRay()
end)

getgenv().Nametag = false
getgenv().Cheamesp = false
getgenv().TracerEnabled = false
getgenv().Highlight = false

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local Holder = Instance.new("Folder", game.CoreGui)
Holder.Name = "ESP"

local tracerContainer = {}
local highlights = {}
local rolesCache = {}

local roleColors = {
Sheriff = Color3.fromRGB(0, 0, 200),
Murderer = Color3.fromRGB(255, 0, 0),
Hero = Color3.fromRGB(255, 255, 0),
None = Color3.fromRGB(0, 140, 0)
}

local outlineColors = {
    Sheriff = Color3.fromRGB(0, 0, 255),
    Murderer = Color3.fromRGB(139, 0, 0),
    Hero = Color3.fromRGB(255, 255, 0),
    None = Color3.fromRGB(0, 128, 0)
}

local function CreateNameTag()
    local NameTag = Instance.new("BillboardGui")
    NameTag.Name = "NameTag"
    NameTag.Size = UDim2.new(0, 200, 0, 50)
    NameTag.AlwaysOnTop = true
    NameTag.StudsOffset = Vector3.new(0, 2.5, 0)

    local Tag = Instance.new("TextLabel", NameTag)
    Tag.Name = "Tag"
    Tag.BackgroundTransparency = 1
    Tag.Size = UDim2.new(0, 300, 0, 20)
    Tag.TextSize = 14
    Tag.Position = UDim2.new(0, -50, 0, 0)
    Tag.TextStrokeTransparency = 0
    Tag.Font = Enum.Font.SourceSansBold

    return NameTag
end

local function LoadCharacter(player)
    if not getgenv().Nametag or player == LocalPlayer then return end

    local character = player.Character
    if not character then return end

    local head = character:FindFirstChild("Head")
    if not head then return end

    local vHolder = Holder:FindFirstChild(player.Name) or Instance.new("Folder", Holder)
    vHolder.Name = player.Name

    local nametag = vHolder:FindFirstChild("NameTag") or CreateNameTag()
    nametag.Parent, nametag.Adornee, nametag.Enabled = vHolder, head, true
    nametag.Tag.Text, nametag.Tag.TextColor3 = player.Name, roleColors.None
end

local function UnloadCharacter(player)
    local vHolder = Holder:FindFirstChild(player.Name)
    if vHolder then vHolder:Destroy() end
end

local function ManagePlayer(player)
    if player == LocalPlayer then return end

    player.CharacterAdded:Connect(function(character)
        task.wait(0.5)
        LoadCharacter(player)
        if getgenv().Highlight then
            local highlight = Instance.new("Highlight")
            highlight.Name = "ESP_Highlight"
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Parent = character
            highlights[player] = highlight
        end
    end)

    player.CharacterRemoving:Connect(function()
        UnloadCharacter(player)
        if highlights[player] then
            highlights[player]:Destroy()
            highlights[player] = nil
        end
    end)

    if player.Character then
        LoadCharacter(player)
    end
end

for _, player in pairs(Players:GetPlayers()) do
    ManagePlayer(player)
end

Players.PlayerAdded:Connect(ManagePlayer)

Players.PlayerRemoving:Connect(function(player)
    UnloadCharacter(player)
    if tracerContainer[player] then
        tracerContainer[player]:Remove()
        tracerContainer[player] = nil
    end
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end
end)

local function UpdateRoles()
    local success, roles = pcall(function()
        return ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    end)
    if not success or not roles then return {} end

    rolesCache = {}
    for playerName, data in pairs(roles) do
        rolesCache[playerName] = data.Role
    end
    return rolesCache
end

local function UpdateLabels()
    for _, player in pairs(Players:GetPlayers()) do
        local nametag = Holder:FindFirstChild(player.Name) and Holder[player.Name]:FindFirstChild("NameTag")
        if nametag then
            local tag = nametag.Tag
            local role = rolesCache[player.Name] or "None"
            tag.TextColor3 = roleColors[role] or roleColors.None
        end
    end
end

local function applyRoleColor(character, role)
    if not character or not getgenv().Cheamesp then return end
    local color = roleColors[role] or roleColors.None

    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            local adornment = part:FindFirstChild("espAdornment")
            if not adornment then
                adornment = Instance.new("BoxHandleAdornment")
                adornment.Name = "espAdornment"
                adornment.Size = part.Size * 1
                adornment.Adornee = part
                adornment.AlwaysOnTop = true
                adornment.ZIndex = 5
                adornment.Transparency = 0.7
                adornment.Parent = part
            end
            adornment.Color3 = color
        end
    end
end

local function removeESP(character)
    if not character then return end
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            local adornment = part:FindFirstChild("espAdornment")
            if adornment then adornment:Destroy() end
        end
    end
end

local function drawTracerLines()
    if not getgenv().TracerEnabled then
        for _, tracer in pairs(tracerContainer) do
            tracer:Remove()
        end
        tracerContainer = {}
        return
    end

    local camera = workspace.CurrentCamera
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
            local humanoid = player.Character:FindFirstChild("Humanoid")

            if rootPart and humanoid and humanoid.Health > 0 then
                local screenPos, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local role = rolesCache[player.Name] or "None"
                    local tracer = tracerContainer[player] or Drawing.new("Line")
                    tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                    tracer.Thickness = 2
                    tracer.Color = roleColors[role] or roleColors.None
                    tracer.Visible = true
                    tracerContainer[player] = tracer
                else
                    if tracerContainer[player] then
                        tracerContainer[player].Visible = false
                    end
                end
            elseif tracerContainer[player] then
                tracerContainer[player]:Remove()
                tracerContainer[player] = nil
            end
        end
    end
end

local lastRoleUpdate = 0
RunService.Heartbeat:Connect(function()
    if not (getgenv().Nametag or getgenv().Cheamesp or getgenv().Highlight or getgenv().TracerEnabled) then
        return
    end

    if os.clock() - lastRoleUpdate >= 3 then
        UpdateRoles()
        lastRoleUpdate = os.clock()
    end

    if getgenv().Nametag then
        UpdateLabels()
    end

    if getgenv().Cheamesp then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local role = rolesCache[player.Name] or "None"
                applyRoleColor(player.Character, role)
            end
        end
    end

    if getgenv().Highlight then
        for player, highlight in pairs(highlights) do
            if player.Character then
                local role = rolesCache[player.Name] or "None"
                highlight.FillColor = roleColors[role] or roleColors.None
                highlight.OutlineColor = outlineColors[role] or outlineColors.None
            end
        end
    end

    drawTracerLines()
end)

VisualSection:NewLabel("ESP Players")

VisualSection:NewToggle("ESP Name", "Toggle Name ESP", function(state)
    getgenv().Nametag = state
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if state then LoadCharacter(player) else UnloadCharacter(player) end
        end
    end
end)

VisualSection:NewToggle("ESP Cham", "Toggle Cham ESP", function(state)
    getgenv().Cheamesp = state
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if state then
                local role = rolesCache[player.Name] or "None"
                applyRoleColor(player.Character, role)
            else
                removeESP(player.Character)
            end
        end
    end
end)

VisualSection:NewToggle("ESP Tracer", "Toggle Tracer ESP", function(state)
    getgenv().TracerEnabled = state
    if not state then
        for _, tracer in pairs(tracerContainer) do
            tracer:Remove()
        end
        tracerContainer = {}
    end
end)

VisualSection:NewToggle("ESP Highlight", "Toggle Highlight ESP", function(state)
    getgenv().Highlight = state
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local highlight = Instance.new("Highlight")
                highlight.Name = "ESP_Highlight"
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0
                highlight.Parent = player.Character
                highlights[player] = highlight
            end
        end
    else
        for player, highlight in pairs(highlights) do
            highlight:Destroy()
            highlights[player] = nil
        end
    end
end)

VisualSection:NewLabel("Gun Stuff")

VisualSection:NewToggle("ESP Gun", "ToggleInfo", function(state)
    savedConfig.espgun12 = state
    saveConfig(savedConfig)
    getgenv().Gunesp = state
    
    local function createLabel(object)  
        local player = game:GetService("Players").LocalPlayer  
        local distance = (object.Position - player.Character.HumanoidRootPart.Position).Magnitude  
        if not object:FindFirstChild("GunLabel") then  
            local label = Instance.new("BillboardGui")  
            label.Name = "GunLabel"  
            label.Adornee = object  
            label.Size = UDim2.new(0, 200, 0, 50)  
            label.StudsOffset = Vector3.new(0, 3, 0)  
            label.AlwaysOnTop = true  
            label.Parent = object  
            local textLabel = Instance.new("TextLabel")  
            textLabel.Size = UDim2.new(1, 0, 1, 0)  
            textLabel.BackgroundTransparency = 1  
            textLabel.TextStrokeTransparency = 0.6  
            textLabel.TextSize = 10
            textLabel.ZIndex = 5  
            textLabel.Parent = label  
            textLabel.Text = string.format("Gun Here! [%d studs]", math.floor(distance))  
            textLabel.TextColor3 = Color3.fromRGB(255, 0, 255)  
        else  
            local textLabel = object.GunLabel:FindFirstChildOfClass("TextLabel")  
            if textLabel then  
                textLabel.Text = string.format("Gun Here! [%d studs]", math.floor(distance))  
            end  
        end  
    end  

    local function removeHighlightsAndLabels()  
        for _, v in pairs(workspace:GetChildren()) do  
            local gunDrop = v:FindFirstChild("GunDrop")  
            if gunDrop then  
                local highlight = gunDrop:FindFirstChild("Highlight")  
                if highlight then  
                    highlight:Destroy()  
                end  
                local label = gunDrop:FindFirstChild("GunLabel")  
                if label then  
                    label:Destroy()  
                end  
            end  
        end  
    end  

    local runConnection  
    if state then  
        runConnection = game:GetService("RunService").Heartbeat:Connect(function()  
            if getgenv().Gunesp then
                for _, v in pairs(workspace:GetChildren()) do  
                    local gunDrop = v:FindFirstChild("GunDrop")  
                    if gunDrop then  
                        if not gunDrop:FindFirstChild("Highlight") then  
                            local highlight = Instance.new("Highlight")  
                            highlight.Parent = gunDrop  
                            highlight.FillTransparency = 0.7  
                            highlight.FillColor = Color3.fromRGB(148, 0, 211)  
                            highlight.OutlineColor = Color3.fromRGB(255, 0, 255)  
                        end  
                        createLabel(gunDrop)  
                    end  
                end  
            end  
        end)  
    else  
        if runConnection then  
            runConnection:Disconnect()  
        end  
        removeHighlightsAndLabels()  
        return
    end  
end) 

local pl = game:GetService("Players").LocalPlayer
local rs = game:GetService("RunService")
local gui = game:GetService("StarterGui")

getgenv().active = false

VisualSection:NewToggle("GunDrop Notifier", "ToggleInfo", function(state)
    getgenv().active = state
end)

local notif = {}

local function checkGuns()
    if not getgenv().active then return end
    local char = pl.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    for _, v in pairs(workspace:GetChildren()) do
        local gun = v:FindFirstChild("GunDrop")
        if gun and not notif[gun] then
            local d = (gun.Position - hrp.Position).Magnitude
            gui:SetCore("SendNotification", {
                Title = "Gun Drop Found!",
                Text = string.format("Gun found at %.2f studs", d),
                Duration = 5
            })
            notif[gun] = true
            for _, c in pairs(gun:GetChildren()) do
                if c:IsA("Mash") then
                    c.Size = Vector3.new(10, 10, 10)
                end
            end
        end
    end
end

rs.Heartbeat:Connect(function()
    checkGuns()
end)

VisualSection:NewLabel("round time")

local state = false
local player = game.Players.LocalPlayer
local coreGui = game:GetService("CoreGui")
local screenGui, timertext

local function createGui()
    if coreGui:FindFirstChild("TimerGui") then return end

    screenGui = Instance.new("ScreenGui")
    screenGui.Name, screenGui.Parent = "TimerGui", coreGui

    timertext = Instance.new("TextLabel")
    timertext.Parent, timertext.BackgroundTransparency, timertext.TextColor3, timertext.TextStrokeColor3, timertext.TextStrokeTransparency, timertext.TextScaled, timertext.AnchorPoint, timertext.Position, timertext.Size, timertext.Font, timertext.Text = 
        screenGui, 1, Color3.fromRGB(255, 255, 255), Color3.fromRGB(0, 0, 0), 0, true, Vector2.new(0.5, 0.5), UDim2.new(0.5, 0, 0.1, 0), UDim2.new(0, 200, 0, 50), Enum.Font.Montserrat, "0:00"
end

local function secondsToMinutes(seconds)
    return string.format("%d:%02d", math.floor(seconds / 60), seconds % 60)
end

local function updateTextColor(timeLeft)
    timertext.TextColor3 = timeLeft <= 10 and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 255, 255)
end

local function flashText(repetitions)
    timertext.Text = "0:00"
    for i = 1, repetitions do
        if not state then break end
        timertext.TextColor3 = Color3.fromRGB(255, 0, 0)
        task.wait(0.5)
        timertext.TextColor3 = Color3.fromRGB(255, 255, 255)
        task.wait(0.5)
    end
end

local function updateTimer()
    while state do
        local success, timeLeft = pcall(function()
            return game.ReplicatedStorage.Remotes.Extras.GetTimer:InvokeServer()
        end)

        if success then
            timertext.Text = secondsToMinutes(timeLeft)
            updateTextColor(timeLeft)

            if timeLeft <= 0 then
                flashText(3)
                timertext.Text = "0:00"

                repeat
                    task.wait(1)
                    success, timeLeft = pcall(function()
                        return game.ReplicatedStorage.Remotes.Extras.GetTimer:InvokeServer()
                    end)
                until timeLeft > 0
            end
        end

        task.wait(1)
    end
end

VisualSection:NewToggle("Start Countdown", "ToggleInfo", function(toggleState)
    state = toggleState

    if state then
        createGui()
        updateTimer()
    else
        if coreGui:FindFirstChild("TimerGui") then
            coreGui:FindFirstChild("TimerGui"):Destroy()
        end
    end
end)

VisualSection:NewLabel("snitch role")

VisualSection:NewButton("Inquire chat who is the sheriff or murderer", "ButtonInfo", function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

local function sendMessage(msg)
    if msg and msg ~= "" then
        pcall(function()
            TextChatService.TextChannels.RBXGeneral:SendAsync(msg)
        end)
    end
end

local function checkRoles()
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    if not roles then return end

    local Sheriff, Murderer
    for playerName, roleData in pairs(roles) do
        if roleData.Role == "Murderer" then
            Murderer = playerName
        elseif roleData.Role == "Sheriff" then
            Sheriff = playerName
        end
    end

    if Sheriff and Murderer then
        sendMessage(Sheriff .. " is the Sheriff and " .. Murderer .. " is the Murderer.")
    elseif Sheriff then
        sendMessage(Sheriff .. " is the Sheriff, but there is no Murderer.")
    elseif Murderer then
        sendMessage(Murderer .. " is the Murderer.")
    end
end

checkRoles()
end)

VisualSection:NewButton("Fps Booster", "ButtonInfo", function()
loadstring(game:HttpGet(("https://raw.githubusercontent.com/Jorgelinea/Fps/refs/heads/main/Protected_3128182632327016.txt"),true))()
    end)

VisualSection:NewButton("fake death", "ButtonInfo", function()
local p = game.Players.LocalPlayer
local c = p.Character or p.CharacterAdded:Wait()
local h = c:WaitForChild("Humanoid")
local cf = c.HumanoidRootPart.CFrame
c:SetPrimaryPartCFrame(cf * CFrame.Angles(math.rad(-90), 0, 0))
h.Sit = true
    end)

TeleportSection:NewButton("Go to the Lobby", "ButtonInfo", function()
local player = game.Players.LocalPlayer
local spawns = workspace:WaitForChild("Lobby"):WaitForChild("Spawns"):GetChildren()

if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and #spawns > 0 then
    local randomSpawn = spawns[math.random(1, #spawns)]
    
    player.Character.HumanoidRootPart.CFrame = randomSpawn.CFrame + Vector3.new(0, 3, 0)
end
end)

local function GetPlayerByRole(role)
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    for i, v in pairs(roles) do
        if v.Role == role then
            return Players:FindFirstChild(i)
        end
    end
    return nil
end

local function TeleportToRole(role)
    local rolePlayer = GetPlayerByRole(role)
    if rolePlayer and rolePlayer.Character and rolePlayer.Character:FindFirstChild("HumanoidRootPart") then
        local Character = Players.LocalPlayer.Character
        if Character then
            Character:SetPrimaryPartCFrame(rolePlayer.Character.HumanoidRootPart.CFrame)
        end
    end
end

local function ViewRole(role)
    local rolePlayer = GetPlayerByRole(role)
    if rolePlayer and rolePlayer.Character and rolePlayer.Character:FindFirstChild("HumanoidRootPart") then
        Camera.CameraSubject = rolePlayer.Character.Humanoid
        Camera.CFrame = rolePlayer.Character.HumanoidRootPart.CFrame
    end
end

VisualSection:NewLabel("View Roles")

VisualSection:NewButton("View Murderer", "Switch camera to the murderer", function()
    ViewRole("Murderer")
end)

VisualSection:NewButton("View Sheriff", "Switch camera to the sheriff", function()
    ViewRole("Sheriff")
end)

VisualSection:NewButton("View Hero", "Switch camera to the hero", function()
    ViewRole("Hero")
end)

VisualSection:NewButton("Return to my camera", "Reset camera to the local player", function()
    local LP = Players.LocalPlayer
    if LP.Character and LP.Character:FindFirstChild("HumanoidRootPart") then
        Camera.CameraSubject = LP.Character.Humanoid
        Camera.CFrame = LP.Character.HumanoidRootPart.CFrame
    end
end)
    
VisualSection:NewButton("Fe emote", "ButtonInfo", function()
loadstring(game:HttpGet("https://pastebin.com/raw/eCpipCTH"))()
end)

--////////////////////////////////////////////////////////////////////////////////
--////////////////////////////////////// TELEPORT ////////////////////////////////////
--////////////////////////////////////////////////////////////////////////////////
 
TeleportSection:NewButton("FAKE SPEED GLICH", "ButtonInfo", function()
if game:GetService("CoreGui"):FindFirstChild("fakespeed") then return end

local gui = Instance.new("ScreenGui")
gui.Name = "fakespeed"
gui.Parent = game:GetService("CoreGui")

local btn = Instance.new("TextButton")
btn.Size = UDim2.new(0, 50, 0, 50)
btn.Position = UDim2.new(0.5, -25, 0.5, -25)
btn.Text = "OFF"
btn.Font = Enum.Font.Gotham
btn.TextSize = 14
btn.TextColor3 = Color3.new(1, 1, 1)
btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
btn.BackgroundTransparency = 0.6
btn.Draggable = true
btn.Parent = gui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 15)
corner.Parent = btn

local active, conn = false
btn.MouseButton1Click:Connect(function()
    active = not active
    btn.Text, btn.BackgroundColor3 = active and "ON" or "OFF", active and Color3.fromRGB(173, 216, 230) or Color3.fromRGB(60, 60, 60)
end)

local plr, rs = game.Players.LocalPlayer, game:GetService("RunService")
local spd, maxSpd, acc, dec, landDec, landSpd, landDur = 3, 15, 0.2, 0.1, 0.05, 2, 0.3

local function setup(chr)
    local hum = chr:WaitForChild("Humanoid")
    local slide, time = false, 0

    if conn then conn:Disconnect() end
    conn = rs.Heartbeat:Connect(function(dt)
        local state, dir = hum:GetState(), hum.MoveDirection
        if state == Enum.HumanoidStateType.Freefall and active then
            spd = dir.Magnitude > 0 and math.min(spd + acc, maxSpd) or math.max(spd - dec, 0)
            chr:TranslateBy(dir * spd * dt)
        elseif state == Enum.HumanoidStateType.Landed then
            if not slide then spd, time, slide = landSpd, 0, true end
        elseif slide then
            if time < landDur then
                chr:TranslateBy(dir * spd * dt)
                spd, time = math.max(spd - landDec, 0), time + dt
            else slide = false end
        else spd = math.max(spd - dec, 0) end
    end)
end

plr.CharacterAdded:Connect(setup)
if plr.Character then setup(plr.Character) end
end)
TeleportSection:NewButton("FAKE Fake bomb trick", "ButtonInfo", function()
local player = game:GetService("Players").LocalPlayer
local coreGui, replicatedStorage = game:GetService("CoreGui"), game:GetService("ReplicatedStorage")

local gui = coreGui:FindFirstChild("bomb")
if gui then gui:Destroy() end

gui = Instance.new("ScreenGui", coreGui)
gui.Name = "bomb"

local btn = Instance.new("TextButton", gui)
btn.Size, btn.Position = UDim2.new(0, 100, 0, 100), UDim2.new(1, -110, 0, 10)
btn.Text, btn.Font, btn.TextSize, btn.TextColor3 = "Fake bomb trick", Enum.Font.Gotham, 14, Color3.new(1, 1, 1)
btn.BackgroundColor3, btn.BackgroundTransparency, btn.Draggable = Color3.new(0, 1, 0), 0.6, true

Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 15)

local canUse, cooldown = true, 22

local function reset()
    canUse, btn.BackgroundColor3, btn.Text = true, Color3.new(0, 1, 0), "Fake bomb trick"
end

local function useBomb()
    if not canUse then return end
    canUse, btn.BackgroundColor3 = false, Color3.new(1, 0, 0)

    local backpack, char = player:FindFirstChild("Backpack"), player.Character or player.CharacterAdded:Wait()
    local bomb = backpack:FindFirstChild("FakeBomb") or char:FindFirstChild("FakeBomb")

    if not bomb then
        replicatedStorage.Remotes.Extras.ReplicateToy:InvokeServer("FakeBomb")
        bomb = backpack:WaitForChild("FakeBomb") or char:WaitForChild("FakeBomb")
    end

    bomb.Parent = char
    if bomb:IsDescendantOf(char) then
        char:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        bomb.Remote:FireServer(char.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0), 50)
        wait(0.3)
        bomb.Parent = backpack
    end

    local start, currentChar = time(), player.Character
    while time() - start < cooldown do
        if player.Character ~= currentChar then reset() return end
        btn.Text = string.format("Cooldown: %ds", cooldown - math.floor(time() - start))
        wait(0.1)
    end

    reset()
end

btn.MouseButton1Click:Connect(useBomb)
player.CharacterAdded:Connect(reset)
reset()
end)

TeleportSection:NewButton("Auto Wallhop", "ButtonInfo", function()
loadstring(game:HttpGet('https://pastebin.com/raw/vpRrW1KA'))()
end)
    
TeleportSection:NewButton("Fling murderer", "ButtonInfo", function()
loadstring(game:HttpGet("https://pastebin.com/raw/YKTYp5Dn"))()
	end)

 TeleportSection:NewButton("Fling sheriff", "ButtonInfo", function()
loadstring(game:HttpGet("https://pastebin.com/raw/Lx8UkvVv"))()
	end)
	
	TeleportSection:NewLabel("Grab Gun")

local player = game.Players.LocalPlayer
local coreGui = game:GetService("CoreGui")
local savedConfig = savedConfig or {}
local autoGrabThread

local function saveConfig(config)
    savedConfig = config
end

TeleportSection:NewToggle("TP Gun", "ToggleInfo", function(state)
    savedConfig.tpgun1 = state
    saveConfig(savedConfig)
    local existingGui = coreGui:FindFirstChild("TPGUN")
    if existingGui then existingGui:Destroy() end
    
    if state then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "TPGUN"
        screenGui.Parent = coreGui

        local button = Instance.new("TextButton")
        button.Name = "TPGUNButton"
        button.Text = "TP Gun"
        button.Size = UDim2.new(0, 60, 0, 50)
        button.Position = UDim2.new(1, -220, 0, 10)
        button.BackgroundTransparency = 0.5
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Draggable = true
        Instance.new("UICorner", button).CornerRadius = UDim.new(0, 15)
        button.Parent = screenGui

        button.MouseButton1Click:Connect(function()
            local character = player.Character
            if not character then return end
            
            local gunDrop = workspace:FindFirstChild("GunDrop", true)
            local root = character:FindFirstChild("HumanoidRootPart")
            
            if gunDrop and root then
                local originalCF = root.CFrame
                root.CFrame = gunDrop.CFrame * CFrame.new(0, -1, 0)
                task.wait(0.02)
                root.CFrame = originalCF
            end
        end)
    end
end)

TeleportSection:NewToggle("Auto grab Gun", "ToggleInfo", function(state)
    savedConfig.grabGun = state
    saveConfig(savedConfig)
    
    if autoGrabThread then
        task.cancel(autoGrabThread)
        autoGrabThread = nil
    end
    
    if state then
        autoGrabThread = task.spawn(function()
            local function hasKnife()
                local character = player.Character
                return character and (player.Backpack:FindFirstChild("Knife") or character:FindFirstChild("Knife"))
            end
            
            while savedConfig.grabGun do
                if not hasKnife() then
                    local gunDrop = workspace:FindFirstChild("GunDrop", true)
                    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                    
                    if gunDrop and root then
                        local original = root.CFrame
                        root.CFrame = CFrame.new(gunDrop.Position)
                        task.wait(0.1)
                        root.CFrame = original
                    end
                end
                task.wait(0.3)
            end
        end)
    end
end)

TeleportSection:NewButton("be invisible", "ButtonInfo", function()
loadstring(game:HttpGet('https://pastebin.com/raw/GgYsFfDK'))()
    end)
 
TeleportSection:NewToggle("tp at the Last Death Position", "ToggleInfo", function(state)
    savedConfig.Death = state
    saveConfig(savedConfig)

    if state then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name, screenGui.Parent = "TeleportGui", game:GetService("CoreGui")

        local teleportButton = Instance.new("TextButton")
        teleportButton.Name, teleportButton.Size, teleportButton.Position, teleportButton.Text, teleportButton.Font, teleportButton.TextSize, teleportButton.TextColor3, teleportButton.BackgroundColor3, teleportButton.BackgroundTransparency, teleportButton.Draggable, teleportButton.BorderSizePixel, teleportButton.Parent = 
            "TeleportButton", UDim2.new(0, 60, 0, 50), UDim2.new(0.5, -170, 0, 10), "Teleport", Enum.Font.Gotham, 10, Color3.fromRGB(255, 255, 255), Color3.fromRGB(60, 60, 60), 0.6, true, 5, screenGui

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius, UICorner.Parent = UDim.new(0, 15), teleportButton

        local player = game.Players.LocalPlayer
        local lastDeathPosition

        local function recordDeathPosition()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                lastDeathPosition = player.Character.HumanoidRootPart.Position
            end
        end

        local function onCharacterDied()
            recordDeathPosition()
        end

        local function onCharacterAdded(character)
            local humanoid = character:WaitForChild("Humanoid", 5)
            if humanoid then humanoid.Died:Connect(onCharacterDied) end
        end

        player.CharacterAdded:Connect(onCharacterAdded)
        if player.Character then onCharacterAdded(player.Character) end

        teleportButton.MouseButton1Click:Connect(function()
            if lastDeathPosition and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(lastDeathPosition)
            end
        end)
    else
        local existingGui = game:GetService("CoreGui"):FindFirstChild("TeleportGui")
        if existingGui then existingGui:Destroy() end
    end
end)

TeleportSection:NewLabel("Teleport To A Specific Location")
TeleportSection:NewButton("Go to the Lobby", "ButtonInfo", function()
local player = game.Players.LocalPlayer
local spawns = workspace:WaitForChild("Lobby"):WaitForChild("Spawns"):GetChildren()

if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and #spawns > 0 then
    local randomSpawn = spawns[math.random(1, #spawns)]
    
    player.Character.HumanoidRootPart.CFrame = randomSpawn.CFrame + Vector3.new(0, 3, 0)
end
end)

TeleportSection:NewButton("Vote Map", "ButtonInfo", function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-109, 141, 88)
end)

TeleportSection:NewButton("Go to Map", "ButtonInfo", function()
for i,v in pairs (workspace:GetDescendants()) do
        if v.Name == "Spawn" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0,2.5,0)
        elseif v.Name == "PlayerSpawn" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0,2.5,0)
        end
    end
end)

TeleportSection:NewButton("void (Safe)", "ButtonInfo", function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local teleportPosition = CFrame.new(-74, 6, 693)

hrp.CFrame = teleportPosition * CFrame.new(0, 3, 0)
    end)
    
TeleportSection:NewButton("tp Sheriff", "Teletransportarse al Sheriff", function()
    TeleportToRole("Sheriff")
end)

TeleportSection:NewButton("tp Murderer", "Teletransportarse al Murderer", function()
    TeleportToRole("Murderer")
end)

TeleportSection:NewButton("tp Hero", "Teletransportarse al Hero", function()
    TeleportToRole("Hero")
end)
 
 --////////////////////////////////////////////////////////////////////////////////
 --////////////////////////////////////// AUTOFARM ////////////////////////////////////
 --////////////////////////////////////////////////////////////////////////////////
local originalSizes, connections = {}, {}

local function modifyHitbox(coin, enlarge)
    if enlarge then
        if not originalSizes[coin] then
            originalSizes[coin] = coin.Size
            coin.Size = Vector3.new(
                originalSizes[coin].X * 4.5,
                originalSizes[coin].Y * 4.5,
                originalSizes[coin].Z * 4.5
            )
        end
    elseif originalSizes[coin] then
        coin.Size = originalSizes[coin]
        originalSizes[coin] = nil
    end
end

local function processCoins(coinContainer, enlarge)
    for _, coin in ipairs(coinContainer:GetChildren()) do
        if coin:IsA("BasePart") and coin.Name == "Coin_Server" then
            modifyHitbox(coin, enlarge)
        end
    end
end

local function setupConnections()
    cleanup()

    for _, model in ipairs(Workspace:GetChildren()) do
        local coinContainer = model:FindFirstChild("CoinContainer")
        if coinContainer then processCoins(coinContainer, true) end
    end

    table.insert(connections, Workspace.ChildAdded:Connect(function(model)
        local coinContainer = model:FindFirstChild("CoinContainer")
        if coinContainer then processCoins(coinContainer, true) end
    end))
end

local function cleanup()
    for _, conn in ipairs(connections) do conn:Disconnect() end
    connections = {}

    for coin in pairs(originalSizes) do
        modifyHitbox(coin, false)
    end
end

getgenv().isEnabled = false

local function toggleCoinSize(state)
    getgenv().isEnabled = state
    if state then
        task.defer(setupConnections)
        
        task.spawn(function()
            while getgenv().isEnabled do
                for _, model in ipairs(Workspace:GetChildren()) do
                    local coinContainer = model:FindFirstChild("CoinContainer")
                    if coinContainer then processCoins(coinContainer, true) end
                end
                task.wait(3)
            end
        end)
    else
        cleanup()
    end
end

AutoFarmSection:NewToggle("magnet coin", "ToggleInfo", toggleCoinSize)

Players.LocalPlayer.CharacterAdded:Connect(function()
    if getgenv().isEnabled then
        task.defer(toggleCoinSize, true)
    end
end)

Players.LocalPlayer.CharacterRemoving:Connect(cleanup)

AutoFarmSection:NewLabel("teleport autofarm")

local Player = game:GetService("Players").LocalPlayer  
local BasePosition = CFrame.new(-74, 30, 693)  

getgenv().Autofarm = false  
getgenv().WaitTime = 3  

local teleportHeight = 1.7  
local coinTeleportCounts = {}  
local lastTeleportTime = 0  

local function IsPlayerNearCoin(coinPosition)  
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do  
        if otherPlayer ~= Player and otherPlayer.Character then  
            local humanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")  
            if humanoidRootPart and (humanoidRootPart.Position - coinPosition).Magnitude < 10 then  
                return true  
            end  
        end  
    end  
    return false  
end  

local function GetValidCoins()  
    local CoinContainer = game.Workspace:FindFirstChild("CoinContainer", true)  
    local validCoins = {}  

    if CoinContainer then  
        for _, coin in pairs(CoinContainer:GetChildren()) do  
            if coin.Name == "Coin_Server" and (coinTeleportCounts[coin] or 0) < 1 then  
                table.insert(validCoins, coin)  
            end  
        end  
    end  

    return validCoins  
end  

local function TeleportToRandomCoin()  
    local validCoins = GetValidCoins()  
    if #validCoins == 0 then return false end  

    local randomCoin = validCoins[math.random(1, #validCoins)]  
    if tick() - lastTeleportTime < 1 then return false end  

    if not IsPlayerNearCoin(randomCoin.Position) then  
        local Character = Player.Character  
        if not Character then return false end  

        local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")  
        if HumanoidRootPart then  
            local coinCFrame = randomCoin.CFrame  
            HumanoidRootPart.CFrame = CFrame.new(randomCoin.Position + Vector3.new(0, teleportHeight, 0), coinCFrame.Position)  
            coinTeleportCounts[randomCoin] = (coinTeleportCounts[randomCoin] or 0) + 1  
            lastTeleportTime = tick()  
            return true  
        end  
    end  
    return false  
end  

local function TeleportToFarthestCoin()  
    local validCoins = GetValidCoins()  
    if #validCoins == 0 then return false end  

    local farthestCoin, maxDistance = nil, 0  
    local playerPosition = Player.Character.HumanoidRootPart.Position  

    for _, coin in pairs(validCoins) do  
        local distance = (coin.Position - playerPosition).Magnitude  
        if distance > maxDistance then  
            farthestCoin = coin  
            maxDistance = distance  
        end  
    end  

    if farthestCoin then  
        local Character = Player.Character  
        if not Character then return false end  

        local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")  
        if HumanoidRootPart then  
            local coinCFrame = farthestCoin.CFrame  
            HumanoidRootPart.CFrame = CFrame.new(farthestCoin.Position + Vector3.new(0, teleportHeight, 0), coinCFrame.Position)  
            coinTeleportCounts[farthestCoin] = (coinTeleportCounts[farthestCoin] or 0) + 1  
            lastTeleportTime = tick()  
            return true  
        end  
    end  
    return false  
end  

task.spawn(function()  
    while true do  
        if getgenv().Autofarm then  
            if not TeleportToFarthestCoin() then  
                if not TeleportToRandomCoin() then  
                    task.wait(0.6)  
                end  
            else  
                task.wait(0.2)  

                local Character = Player.Character  
                if Character and Character:FindFirstChild("HumanoidRootPart") then  
                    local newBasePosition = BasePosition + Vector3.new(0, 10, 0)  
                    Character.HumanoidRootPart.CFrame = newBasePosition  
                end  

                task.wait(getgenv().WaitTime)  
            end  
        else  
            task.wait(0.6)  
        end  
    end  
end)  

game.Workspace.DescendantAdded:Connect(function(Instance)  
    if Instance.Name == "CoinContainer" then  
        TeleportToFarthestCoin()  
    end  
end)  

AutoFarmSection:NewToggle("Autofarm Tp (Beta)", "ToggleInfo", function(state)  
    getgenv().Autofarm = state  
    if state then  
        print("Autofarm activado")  
    else  
        print("Autofarm desactivado")  
    end  
end)  

AutoFarmSection:NewTextBox("Speed Autofarm Tp", "", function(value)  
    local speed = tonumber(value)  
    if speed and speed > 0 then  
        getgenv().WaitTime = speed

        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Speed Set",
            Text = "The preset speed is 3.",
            Duration = 5
        })

        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "New Speed",
            Text = "New speed set: " .. speed,
            Duration = 5
        })

        if speed == 1 then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Warning",
                Text = "It is likely that you will be kicked from the game.",
                Duration = 5
            })
        end
    end  
end)

AutoFarmSection:NewButton("lower cpu load", "ToggleInfo", function(state)
    loadstring(game:HttpGet("https://pastebin.com/raw/1R1D3nL7"))()
    end)

local D3RenderingDisabled = false

AutoFarmSection:NewToggle("Disable 3D rendering", "ToggleInfo", function(state)
        savedConfig.renderizado = state
        saveConfig(savedConfig)

        if not D3RenderingDisabled and state then
            D3RenderingDisabled = true
            RunService:Set3dRenderingEnabled(false)
        elseif D3RenderingDisabled and not state then
            D3RenderingDisabled = false
            RunService:Set3dRenderingEnabled(true)
        end
    end)
    
getgenv().scriptEnabled = false

local p = game:GetService("Players")
local rs = game:GetService("RunService")

local lp = p.LocalPlayer
local targetPos = Vector3.new(-108, 138, 9)
local hasTeleported = false

local function hasKnife(player)
    local c = player.Character
    local b = player:FindFirstChild("Backpack")

    if c then
        for _, t in ipairs(c:GetChildren()) do
            if t:IsA("Tool") and t.Name == "Knife" then
                return true
            end
        end
    end

    if b then
        for _, t in ipairs(b:GetChildren()) do
            if t:IsA("Tool") and t.Name == "Knife" then
                return true
            end
        end
    end

    return false
end

local function onCharacterAdded()
    hasTeleported = false
end

lp.CharacterAdded:Connect(onCharacterAdded)

local connection
connection = rs.Heartbeat:Connect(function()
    if not getgenv().scriptEnabled then
        return
    end

    local rootPart = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    
    if rootPart and not hasTeleported then
        for _, player in ipairs(p:GetPlayers()) do
            if player ~= lp and hasKnife(player) then
                rootPart.CFrame = CFrame.new(targetPos)
                hasTeleported = true
                break
            end
        end
    end
end)

AutoFarmSection:NewToggle("Auto XP", "ToggleInfo", function(state)
    getgenv().scriptEnabled = state
end)

 --////////////////////////////////////////////////////////////////////////////////
 --////////////////////////////////////// LOCALPLAYER ////////////////////////////////////
 --////////////////////////////////////////////////////////////////////////////////
 
local isAnchored = false

LocalPlayerSection:NewButton("Anchor character", "ButtonInfo", function()
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    
    isAnchored = not isAnchored
    for _, part in ipairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            part.Anchored = isAnchored
        end
    end
end)

local jugadorLocal = game.Players.LocalPlayer
local colisionesDeshabilitadas = false

local function actualizarColisiones(state)
    colisionesDeshabilitadas = state
    for _, jugador in pairs(game.Players:GetPlayers()) do
        if jugador ~= jugadorLocal then
            local personaje = jugador.Character
            if personaje then
                for _, parte in pairs(personaje:GetChildren()) do
                    if parte:IsA("BasePart") then
                        parte.CanCollide = not colisionesDeshabilitadas
                    end
                end
            end
        end
    end
end

LocalPlayerSection:NewLabel("It also works as an anti-fling ")
LocalPlayerSection:NewToggle("Disable players collisions", "ToggleInfo", function(state)
    actualizarColisiones(state)
end)

game:GetService("RunService").Stepped:Connect(function()
    if colisionesDeshabilitadas then
        for _, jugador in pairs(game.Players:GetPlayers()) do
            if jugador ~= jugadorLocal then
                local personaje = jugador.Character
                if personaje then
                    for _, parte in pairs(personaje:GetChildren()) do
                        if parte:IsA("BasePart") then
                            parte.CanCollide = false
                        end
                    end
                end
            end
        end
    else
        for _, jugador in pairs(game.Players:GetPlayers()) do
            if jugador ~= jugadorLocal then
                local personaje = jugador.Character
                if personaje then
                    for _, parte in pairs(personaje:GetChildren()) do
                        if parte:IsA("BasePart") then
                            parte.CanCollide = true
                        end
                    end
                end
            end
        end
    end
end)

LocalPlayerSection:NewButton("second life", "ButtonInfo", function()
local function GodMode()
    local p = game.Players.LocalPlayer
    local c = p.Character or p.CharacterAdded:Wait()

    if c and c:FindFirstChild("Humanoid") then
        local h = c.Humanoid
        local accs = {}

        for _, acc in pairs(c:GetChildren()) do
            if acc:IsA("Accessory") then
                table.insert(accs, acc:Clone())
                acc:Destroy()
            end
        end

        local nh = h:Clone()
        nh.Parent = c
        nh.Name = "Humanoid"
        nh.WalkSpeed = 18.3
        nh.JumpPower = 53
        nh.Health = math.huge
        nh.MaxHealth = math.huge

        workspace.CurrentCamera.CameraSubject = nh

        local anim = c:FindFirstChild("Animate")
        if anim then
            anim.Disabled = true
            wait(0.1)
            anim.Disabled = false
        end

        for _, acc in pairs(accs) do
            nh:AddAccessory(acc)
        end

        h:Destroy()

        nh.Died:Connect(function()
            wait(0.1)
            nh.Health = math.huge
        end)
    end
end

GodMode()
    end)
    
local gevget = getgenv()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

gevget.Noclip = false
local originalStates = {}

LocalPlayerSection:NewToggle("Noclip", "xd simple de atravesar paredes", function(state)
    gevget.Noclip = state
    
    if not state then
        for part, canCollide in pairs(originalStates) do
            if part and part.Parent then
                part.CanCollide = canCollide
            end
        end
        originalStates = {}
    end
end)

RunService.Stepped:Connect(function()
    if gevget.Noclip and player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                if not originalStates[part] then
                    originalStates[part] = part.CanCollide
                end
                part.CanCollide = false
            end
        end
    end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local plr = Players.LocalPlayer

local settings = {
    gravity = { default = 196.2, current = 196.2, loop = false },
    speed = { value = 17, loop = false },
    jump = { power = 50, loop = false, infinite = false },
    connections = {}
}

local function updateHumanoid(property, value)
    local humanoid = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then humanoid[property] = value end
end

LocalPlayerSection:NewTextBox("Gravity", "Enter a value", function(v)
    settings.gravity.current = tonumber(v) or settings.gravity.default
    if not settings.gravity.loop then workspace.Gravity = settings.gravity.current end
end)

LocalPlayerSection:NewToggle("Gravity loop", "ToggleInfo", function(s)
    settings.gravity.loop = s
    workspace.Gravity = s and 400 or settings.gravity.current
end)

LocalPlayerSection:NewTextBox("Speed", "Enter a value", function(v)
    settings.speed.value = tonumber(v) or 16
    if not settings.speed.loop then updateHumanoid("WalkSpeed", settings.speed.value) end
end)

LocalPlayerSection:NewToggle("Loop speed", "ToggleInfo", function(s)
    settings.speed.loop = s
    if s then
        settings.connections.speed = RunService.Heartbeat:Connect(function()
            updateHumanoid("WalkSpeed", settings.speed.value)
        end)
    elseif settings.connections.speed then
        settings.connections.speed:Disconnect()
    end
end)

LocalPlayerSection:NewTextBox("Power Jump", "Enter a value", function(v)
    settings.jump.power = tonumber(v) or 50
    if not settings.jump.loop then updateHumanoid("JumpPower", settings.jump.power) end
end)

LocalPlayerSection:NewToggle("Power Jump/Loop", "ToggleInfo", function(s)
    settings.jump.loop = s
    if s then
        settings.connections.jump = RunService.Heartbeat:Connect(function()
            updateHumanoid("JumpPower", settings.jump.power)
        end)
    elseif settings.connections.jump then
        settings.connections.jump:Disconnect()
    end
end)

LocalPlayerSection:NewToggle("Infinite Jump", "ToggleInfo", function(s)
    settings.jump.infinite = s
    if s then
        settings.connections.infinite = UserInputService.JumpRequest:Connect(function()
            local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then humanoid:ChangeState("Jumping") end
        end)
    elseif settings.connections.infinite then
        settings.connections.infinite:Disconnect()
    end
end)
 
  --////////////////////////////////////////////////////////////////////////////////
 --////////////////////////////////////// EMOTE ////////////////////////////////////
 --////////////////////////////////////////////////////////////////////////////////
 
 EmoteSection:NewButton("Get all the emotes", "ButtonInfo", function()
        local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
        local Emotes = PlayerGui:WaitForChild("MainGUI"):WaitForChild("Game"):FindFirstChild("Emotes")

        if Emotes then
            local success = pcall(function()
                require(game:GetService("ReplicatedStorage").Modules.EmoteModule).GeneratePage(
                    {"headless", "zombie", "zen", "ninja", "floss", "dab", "sit"},
                    Emotes,
                    "Free Emotes"
                )
            end)

            if success then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success",
                    Text = "Emotes obtained",
                    Duration = 3
                })
            end
        end
    end)
    
local anim = Instance.new('Animation')

EmoteSection:NewButton("Ninja", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2431864798"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)

EmoteSection:NewButton("Dab", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2445521505"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)

EmoteSection:NewButton("Floss", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2452938820"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)

EmoteSection:NewButton("Headless", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2513694073"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)

EmoteSection:NewButton("Zen", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2431812646"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)

EmoteSection:NewButton("Zombie", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2513692312"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)

EmoteSection:NewButton("Sit", "ButtonInfo", function()
        anim.AnimationId = "rbxassetid://2431845940"
		local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
		track:Play()
		game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
			track:Stop()
		end)
    end)
 
--////////////////////////////////////////////////////////////////////////////////
--////////////////////////////////////// MIC ////////////////////////////////////
--////////////////////////////////////////////////////////////////////////////////
 
MICSection:NewButton("Delete Settings", "ButtonInfo", function()
    local configFileName = "mm2Config.txt"

local function deleteConfigFile()
    if isfile(configFileName) then
        delfile(configFileName)
    end
end

deleteConfigFile()
end)

local toggleAntiAfk = false

MICSection:NewToggle("Anti afk", "Anti-AFK", function(state)
    toggleAntiAfk = state
    if toggleAntiAfk then
        antiAfkConnection = game:GetService("Players").LocalPlayer.Idled:Connect(function()
            local C = game:GetService("VirtualUser")
            C:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            C:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end)
    else
        if antiAfkConnection then
            antiAfkConnection:Disconnect()
            antiAfkConnection = nil
        end
    end
end)
    
local player = game.Players.LocalPlayer
local guiName = "JumpGui"
local savedConfig = savedConfig or {jumpins = false}
local gui, connections

local function jump()
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

local function toggleJumpFeature(enable)
    if connections then
        for _, conn in ipairs(connections) do conn:Disconnect() end
        connections = nil
    end
    if gui then gui:Destroy() gui = nil end
    
    if enable then
        connections = {}
        gui = Instance.new("ScreenGui")
        gui.Name = guiName
        gui.Parent = game:GetService("CoreGui")
        
        local jumpButton = Instance.new("TextButton")
        jumpButton.Size = UDim2.new(0, 100, 0, 90)
        jumpButton.Position = UDim2.new(1, -110, 1, -120)
        jumpButton.Text = "Jump"
        jumpButton.Font = Enum.Font.Gotham
        jumpButton.TextSize = 14
        jumpButton.TextColor3 = Color3.new(1, 1, 1)
        jumpButton.BackgroundColor3 = Color3.new(60, 60, 60)
        jumpButton.BackgroundTransparency = 0.6
        jumpButton.BorderSizePixel = 0
        jumpButton.Parent = gui
        
        Instance.new("UICorner", jumpButton).CornerRadius = UDim.new(0, 15)
        
        local autoJump
        table.insert(connections, jumpButton.MouseButton1Down:Connect(function()
            autoJump = task.spawn(function()
                while true do
                    jump()
                    task.wait(0.1)
                end
            end)
        end))
        
        table.insert(connections, jumpButton.MouseButton1Up:Connect(function()
            if autoJump then task.cancel(autoJump) end
        end))
        
        table.insert(connections, game:GetService("UserInputService").InputBegan:Connect(function(input, gp)
            if not gp and input.KeyCode == Enum.KeyCode.Space then
                jump()
            end
        end))
    end
end

MICSection:NewToggle("Jump into second life.", "ToggleInfo", function(state)
    savedConfig.jumpins = state
    saveConfig(savedConfig) 
    toggleJumpFeature(state)
end)

MICSection:NewButton("fling all", "ButtonInfo", function()
loadstring(game:HttpGet("https://pastebin.com/raw/HpNf0TYX"))()
    end)
    
MICSection:NewButton("ReJoin", "ButtonInfo", function()
local ts = game:GetService("TeleportService")
local p = game:GetService("Players").LocalPlayer
ts:Teleport(game.PlaceId, p)
    end)
 
 --////////////////////////////////////////////////////////////////////////////////
--////////////////////////////////////// BOTONES ////////////////////////////////////
--///////////////////////////////////////////////////////////////////////////////
